import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters, CallbackContext, CallbackQueryHandler, CommandHandler
from telegram.constants import ParseMode

# –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
BOT_TOKEN = "–í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞"
# ID –≤–∞—à–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (—á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ @username)
CHANNEL_ID = "@–ª–æ–≥–∏–Ω –∫–∞–Ω–∞–ª–∞"  # –ò–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID


# –¢–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏
SIGNATURE = "[üëâ –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –ø–æ—Å—Ç–∞](t.me/–ª–æ–≥–∏–Ω –∫–∞–Ω–∞–ª–∞)"

async def handle_news(update: Update, context: CallbackContext):
    user = update.effective_user
    message = update.message
    chat_id = update.effective_chat.id

    if message.photo or message.video:
        caption = message.caption or ""
        await message.reply_text("–í–∞—à–∞ –Ω–æ–≤–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

        keyboard = [
            [InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept:{message.message_id}:{chat_id}"),
             InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{message.message_id}:{chat_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await context.bot.send_message(
            chat_id=context.bot.id,  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            text=f"–ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name}:\n{caption}\n\nMessage ID: {message.message_id}", #Added message ID for easier identification
            reply_markup=reply_markup,
            reply_to_message_id=message.message_id
        )
    else:
        await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ—Å—Ç—å —Å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")

async def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data.split(":")
    action = data[0]
    message_id = int(data[1])
    chat_id = int(data[2])

    if action == "accept":
        try:
            original_message = await context.bot.get_message(message_id)
            caption = original_message.caption or ""
            caption += f"\n\n{SIGNATURE}"

            if original_message.photo:
                await context.bot.send_photo(chat_id=CHANNEL_ID, photo=original_message.photo[-1].file_id, caption=caption, parse_mode=ParseMode.MARKDOWN_V2)
            elif original_message.video:
                await context.bot.send_video(chat_id=CHANNEL_ID, video=original_message.video.file_id, caption=caption, parse_mode=ParseMode.MARKDOWN_V2)
            await query.answer("–ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
        except Exception as e:
            await query.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
    elif action == "reject":
        await query.answer("–ù–æ–≤–æ—Å—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

    await query.delete_message()

async def start(update: Update, context: CallbackContext):
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ—Å—Ç—å —Å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ!")


async def main():
    loop = asyncio.get_event_loop()
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    application.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO & ~filters.COMMAND, handle_news))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(CommandHandler("start", start))
    await application.run_polling()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")

    loop.run_forever()

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())